{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { ui } from './ui';\nexport const todos = createSlice({\n  name: 'todos',\n  intitialState: {\n    all: [null, null]\n  },\n  reducers: {\n    setTodos: (state, action) => {\n      state.all = action.payload;\n    }\n  }\n}); // by constructing this in a way where this function is called by another function. we could pass an id or whatever as a prop.\n\nexport const fetchTodos = () => {\n  return dispatch => {\n    disptach(ui.actions.setLoading(true));\n    fetch('https://jsonplaceholder.typicode.com/todos').then(res => res.json()).then(json => {\n      dispatch(todos.actions.setTodos(json));\n      dispatch(ui.actions.setLoading(false));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/bunnyhop/Documents/1_RecordKeeping/WRK/d.School/_Ref.MakeWeb/Technigo/Sprint-4/Week-16/CODEALONG-WK16/code/src/reducers/todos.js"],"names":["createSlice","ui","todos","name","intitialState","all","reducers","setTodos","state","action","payload","fetchTodos","dispatch","disptach","actions","setLoading","fetch","then","res","json"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAO,MAAMC,KAAK,GAAGF,WAAW,CAAC;AAC/BG,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,GAAG,EAAE,CAAC,IAAD,EAAO,IAAP;AADQ,GAFgB;AAK/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACH,GAAN,GAAYI,MAAM,CAACC,OAAnB;AACD;AAHO;AALqB,CAAD,CAAzB,C,CAaP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAQC,QAAD,IAAc;AACnBC,IAAAA,QAAQ,CAACZ,EAAE,CAACa,OAAH,CAAWC,UAAX,CAAsB,IAAtB,CAAD,CAAR;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESE,IAAD,IAAU;AACdP,MAAAA,QAAQ,CAACV,KAAK,CAACY,OAAN,CAAcP,QAAd,CAAuBY,IAAvB,CAAD,CAAR;AACAP,MAAAA,QAAQ,CAACX,EAAE,CAACa,OAAH,CAAWC,UAAX,CAAsB,KAAtB,CAAD,CAAR;AACD,KALH;AAMD,GARD;AASD,CAVM","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nimport { ui } from './ui'\n\nexport const todos = createSlice({\n  name: 'todos',\n  intitialState: {\n    all: [null, null]\n  },\n  reducers: {\n    setTodos: (state, action) => {\n      state.all = action.payload\n    }\n  }\n})\n\n\n// by constructing this in a way where this function is called by another function. we could pass an id or whatever as a prop.\nexport const fetchTodos = () => {\n  return (dispatch) => {\n    disptach(ui.actions.setLoading(true))\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then((res) => res.json())\n      .then((json) => {\n        dispatch(todos.actions.setTodos(json))\n        dispatch(ui.actions.setLoading(false))\n      })\n  }\n}"]},"metadata":{},"sourceType":"module"}