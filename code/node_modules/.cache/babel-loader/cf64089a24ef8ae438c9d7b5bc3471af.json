{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const quotes = createSlice({\n  name: 'quotes',\n  initialState: {\n    quote: {},\n    history: []\n  },\n  reducers: {\n    generateQuote: (state, action) => {\n      // Check if quote from Redux store is not empty object.\n      // If it is, do not push empty object to history array\n      // If it is not, do it\n      if (state.quote.quote) {\n        state.history = [...state.history, state.quote];\n      }\n\n      state.quote = action.payload;\n    },\n    historyGoBack: (state, action) => {\n      if (state.history.length > 0) {\n        state.quote = state.history[state.history.length - 1];\n        state.history = state.history.slice(0, state.history.length - 1);\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/bunnyhop/Documents/1_RecordKeeping/WRK/d.School/_Ref.MakeWeb/Technigo/Sprint-4/Week-16/CODEALONG-WK16/code/src/reducers/quotes.js"],"names":["createSlice","quotes","name","initialState","quote","history","reducers","generateQuote","state","action","payload","historyGoBack","length","slice"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,MAAM,GAAGD,WAAW,CAAC;AAC9BE,EAAAA,IAAI,EAAE,QADwB;AAE9BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,OAAO,EAAE;AAFC,GAFgB;AAM9BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B;AACA;AACA;AACA,UAAID,KAAK,CAACJ,KAAN,CAAYA,KAAhB,EAAuB;AACnBI,QAAAA,KAAK,CAACH,OAAN,GAAgB,CAAC,GAAGG,KAAK,CAACH,OAAV,EAAmBG,KAAK,CAACJ,KAAzB,CAAhB;AACH;;AACDI,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACC,OAArB;AACH,KATK;AAUNC,IAAAA,aAAa,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAID,KAAK,CAACH,OAAN,CAAcO,MAAd,GAAuB,CAA3B,EAA8B;AAC1BJ,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACH,OAAN,CAAcG,KAAK,CAACH,OAAN,CAAcO,MAAd,GAAuB,CAArC,CAAd;AACAJ,QAAAA,KAAK,CAACH,OAAN,GAAgBG,KAAK,CAACH,OAAN,CAAcQ,KAAd,CAAoB,CAApB,EAAuBL,KAAK,CAACH,OAAN,CAAcO,MAAd,GAAuB,CAA9C,CAAhB;AACH;AACJ;AAfK;AANoB,CAAD,CAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const quotes = createSlice({\n    name: 'quotes',\n    initialState: {\n        quote: {},\n        history: []\n    },\n    reducers: {\n        generateQuote: (state, action) => {\n            // Check if quote from Redux store is not empty object.\n            // If it is, do not push empty object to history array\n            // If it is not, do it\n            if (state.quote.quote) {\n                state.history = [...state.history, state.quote];\n            }\n            state.quote = action.payload;   \n        },\n        historyGoBack: (state, action) => {\n            if (state.history.length > 0) {\n                state.quote = state.history[state.history.length - 1];\n                state.history = state.history.slice(0, state.history.length - 1);\n            }\n        }\n    }\n});\n\n"]},"metadata":{},"sourceType":"module"}